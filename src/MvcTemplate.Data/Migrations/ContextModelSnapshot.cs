// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcTemplate.Data.Core;

namespace MvcTemplate.Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MvcTemplate.Objects.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<string>("Passhash")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("RecoveryToken")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("RecoveryTokenExpirationDate");

                    b.Property<int?>("RoleId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ModifiedByAccountId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressTypeId");

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("DeletedByAccountId");

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MvcTemplate.Objects.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IObsoletable");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<string>("Name");

                    b.Property<int?>("ObsoletedByAccountId");

                    b.Property<DateTime?>("ObsoletionDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.HasIndex("ObsoletedByAccountId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("MvcTemplate.Objects.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Changes")
                        .IsRequired();

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactTypeId");

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("DeletedByAccountId");

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("MvcTemplate.Objects.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IObsoletable");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<string>("Name");

                    b.Property<int?>("ObsoletedByAccountId");

                    b.Property<DateTime?>("ObsoletionDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.HasIndex("ObsoletedByAccountId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivatedByAccountId");

                    b.Property<int?>("ActivatedById");

                    b.Property<DateTime?>("ActivationDate");

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DeletedByAccountId");

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<long>("Name");

                    b.Property<long>("Number");

                    b.HasKey("Id");

                    b.HasIndex("ActivatedById");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("DeletedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Area")
                        .HasMaxLength(64);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MvcTemplate.Objects.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByAccountId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModificationDate");

                    b.Property<int?>("ModifiedByAccountId");

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAccountId");

                    b.HasIndex("ModifiedByAccountId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Account", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("MvcTemplate.Objects.Address", b =>
                {
                    b.HasOne("MvcTemplate.Objects.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.AddressType", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ObsoletedBy")
                        .WithMany()
                        .HasForeignKey("ObsoletedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.AuditLog", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.Contact", b =>
                {
                    b.HasOne("MvcTemplate.Objects.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.ContactType", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ObsoletedBy")
                        .WithMany()
                        .HasForeignKey("ObsoletedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.Customer", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "ActivatedBy")
                        .WithMany()
                        .HasForeignKey("ActivatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.Permission", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MvcTemplate.Objects.Role", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId");

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId");
                });

            modelBuilder.Entity("MvcTemplate.Objects.RolePermission", b =>
                {
                    b.HasOne("MvcTemplate.Objects.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Account", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MvcTemplate.Objects.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
